LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY three_digit_timer IS
    PORT (
        Clk      : IN  STD_LOGIC;
        Reset    : IN  STD_LOGIC;
        Enable   : IN  STD_LOGIC;
        Data_In  : IN  STD_LOGIC_VECTOR(9 DOWNTO 0);
        Min_ones : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
        Sec_tens : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
        Sec_ones : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
        Time_Out : OUT STD_LOGIC
    );
END ENTITY;

ARCHITECTURE structural OF three_digit_timer IS

    -- Internal signal declarations
    SIGNAL s_sec_ones : STD_LOGIC_VECTOR(3 DOWNTO 0);
    SIGNAL s_sec_tens : STD_LOGIC_VECTOR(3 DOWNTO 0);
    SIGNAL s_min_ones : STD_LOGIC_VECTOR(3 DOWNTO 0);

    SIGNAL target_sec_ones : STD_LOGIC_VECTOR(3 DOWNTO 0);
    SIGNAL target_sec_tens : STD_LOGIC_VECTOR(3 DOWNTO 0);
    SIGNAL target_min_ones : STD_LOGIC_VECTOR(3 DOWNTO 0);

    SIGNAL en_sec_tens    : STD_LOGIC := '0';
    SIGNAL en_min_ones    : STD_LOGIC := '0';
    SIGNAL reset_sec_tens : STD_LOGIC := '0';
    SIGNAL reset_sec_tens_internal : STD_LOGIC;

    -- Component Declaration
    COMPONENT BCD_Counter
        PORT (
            Clk : IN STD_LOGIC;
            Reset : IN STD_LOGIC;
            Enable : IN STD_LOGIC;
            Direction : IN STD_LOGIC;
            Q_Out : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
        );
    END COMPONENT;

BEGIN

    reset_sec_tens_internal <= Reset OR reset_sec_tens;

    -- Load Data_In into target values with BCD capping
    PROCESS (Clk)
    BEGIN
        IF rising_edge(Clk) THEN
            IF Reset = '1' THEN
                -- Minutes Ones (max 3)
                IF Data_In(9 DOWNTO 6) > "0011" THEN
                    target_min_ones <= "0011";
                ELSE
                    target_min_ones <= Data_In(9 DOWNTO 6);
                END IF;

                -- Seconds Tens (max 5)
                IF Data_In(5 DOWNTO 3) > "0101" THEN
                    target_sec_tens <= "0101";
                ELSE
                    target_sec_tens <= Data_In(5 DOWNTO 3);
                END IF;

                -- Seconds Ones (max 9)
                IF ('0' & Data_In(2 DOWNTO 0)) > "1001" THEN
                    target_sec_ones <= "1001";
                ELSE
                    target_sec_ones <= '0' & Data_In(2 DOWNTO 0);
                END IF;
            END IF;
        END IF;
    END PROCESS;

    -- Seconds Ones Counter
    sec_ones_inst : BCD_Counter
    PORT MAP(
        Clk => Clk,
        Reset => Reset,
        Enable => Enable,
        Direction => '1',
        Q_Out => s_sec_ones
    );

    -- Logic to Enable Seconds Tens
    PROCESS (Reset, Enable, s_sec_ones)
    BEGIN
        IF Reset = '1' THEN
            en_sec_tens <= '0';
        ELSIF Enable = '1' AND s_sec_ones = "1001" THEN
            en_sec_tens <= '1';
        ELSE
            en_sec_tens <= '0';
        END IF;
    END PROCESS;

    -- Seconds Tens Counter
    sec_tens_inst : BCD_Counter
    PORT MAP(
        Clk => Clk,
        Reset => reset_sec_tens_internal,
        Enable => en_sec_tens,
        Direction => '1',
        Q_Out => s_sec_tens
    );

    -- Reset Seconds Tens at 59
    PROCESS (Clk)
    BEGIN
        IF rising_edge(Clk) THEN
            IF Enable = '1' AND s_sec_ones = "1000" AND s_sec_tens = "0101" THEN
                reset_sec_tens <= '1';
            ELSE
                reset_sec_tens <= '0';
            END IF;
        END IF;
    END PROCESS;

    -- Enable Minutes Ones Counter
    PROCESS (Clk)
    BEGIN
        IF rising_edge(Clk) THEN
            IF Reset = '1' THEN
                en_min_ones <= '0';
            ELSIF Enable = '1' AND s_sec_ones = "1000" AND s_sec_tens = "0101" THEN
                en_min_ones <= '1';
            ELSE
                en_min_ones <= '0';
            END IF;
        END IF;
    END PROCESS;

    -- Minutes Ones Counter
    min_ones_inst : BCD_Counter
    PORT MAP(
        Clk => Clk,
        Reset => Reset,
        Enable => en_min_ones,
        Direction => '1',
        Q_Out => s_min_ones
    );

    -- Time_Out Logic
    Time_Out <= '1' WHEN (s_min_ones = target_min_ones AND
                          s_sec_tens = target_sec_tens AND
                          s_sec_ones = target_sec_ones)
               ELSE '0';

    -- Output Assignments
    Sec_ones <= s_sec_ones;
    Sec_tens <= s_sec_tens;
    Min_ones <= s_min_ones;

END ARCHITECTURE;
